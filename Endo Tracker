import streamlit as st
import pandas as pd
import os
from datetime import datetime
import matplotlib.pyplot as plt

DATA_FILE = "health_data.csv"

TREATMENT_OPTIONS = [
    "Danazol", "Mefenamic acid", "Exercise", "Dietary changes",
    "Over the counter (Ibuprofen/paracetamol)", "Pelvic health physio", "Acupuncture",
    "Massage", "Anti-inflammatory gels/creams (Voltarol)", "Hysterectomy", "Tramadol",
    "Diclofenac", "Laxatives", "GnRH analogue injections/spray (Zoladex)",
    "Anti-depressants", "Tranexamic acid", "Hot water bottle/pads", "TENS machine",
    "Progestogens", "Stress management", "CBD oil/tampons", "Codeine", "Osteopath",
    "Laprascopy", "Naproxen"
]

def load_data():
    if os.path.exists(DATA_FILE):
        return pd.read_csv(DATA_FILE, parse_dates=["Date"])
    else:
        return pd.DataFrame(columns=[
            "Date", "Anxiety", "Hair Loss", "Pain before period starts", "Period Pain", "Headache pain",
            "Pain during or after intercourse", "Chest pain", "Shoulder pain", "Back and/or leg pain",
            "Pain and or blood during urination", "Pelvic pain", "Pain during ovulation",
            "Presence of old or dark blood before period", "Difficulty getting pregnant",
            "Bleeding in between periods", "Pain and/or blood during periods", "Presence of blood in stool",
            "Calories", "Weight", "Notes", "Treatments Used", "Treatment Comments"
        ])

def save_entry(entry):
    df = load_data()
    df = pd.concat([df, pd.DataFrame([entry])], ignore_index=True)
    df.to_csv(DATA_FILE, index=False)

def main():
    st.set_page_config(page_title="Endometriosis Daily Journal", layout="centered")
    st.title("ðŸŒ¼ Endometriosis Daily Journal")

    with st.form("entry_form"):
        date = st.date_input("Select Date", datetime.today())
        anxiety = st.slider("Anxiety Level", 0, 10, 0)
        hair_loss = st.slider("Hair Loss Level", 0, 10, 0)
        pain_before_period = st.slider("Pain before period starts", 0, 10, 0)
        period_pain = st.slider("Period Pain", 0, 10, 0)
        headache_pain = st.slider("Headache pain", 0, 10, 0)
        intercourse_pain = st.slider("Pain during or after intercourse", 0, 10, 0)
        chest_pain = st.slider("Chest pain", 0, 10, 0)
        shoulder_pain = st.slider("Shoulder pain", 0, 10, 0)
        back_leg_pain = st.slider("Back and/or leg pain", 0, 10, 0)
        urination_pain = st.slider("Pain and/or blood during urination", 0, 10, 0)
        pelvic_pain = st.slider("Pelvic pain", 0, 10, 0)
        ovulation_pain = st.slider("Pain during ovulation", 0, 10, 0)

        old_blood = st.checkbox("Presence of old or dark blood before period")
        difficulty_pregnant = st.checkbox("Difficulty getting pregnant")
        between_bleeding = st.checkbox("Bleeding in between periods")
        blood_during_period = st.checkbox("Pain and/or blood during periods")
        blood_in_stool = st.checkbox("Presence of blood in stool")

        calories = st.slider("Caloric intake level", 0, 10000, 0)
        weight = st.number_input("Weight (kg)", min_value=0.0, format="%.2f")
        notes = st.text_area("Notes", placeholder="Write any observations...")

        st.markdown("### ðŸ’Š Treatments")
        used_treatment = st.radio(
            "Did you use any treatments today to help manage your symptoms?",
            ["No", "Yes"]
        )

        treatments_used = []
        treatment_comments = ""
        if used_treatment == "Yes":
            treatments_used = st.multiselect(
                "Select all treatments you used today:",
                options=TREATMENT_OPTIONS
            )
            treatment_comments = st.text_area(
                "ðŸ’¬ Comments regarding treatment(s)",
                placeholder="Write your reflections or observations about treatments..."
            )

        submitted = st.form_submit_button("ðŸ’¾ Save Entry")

        if submitted:
            entry = {
                "Date": pd.to_datetime(date),
                "Anxiety": anxiety,
                "Hair Loss": hair_loss,
                "Pain before period starts": pain_before_period,
                "Period Pain": period_pain,
                "Headache pain": headache_pain,
                "Pain during or after intercourse": intercourse_pain,
                "Chest pain": chest_pain,
                "Shoulder pain": shoulder_pain,
                "Back and/or leg pain": back_leg_pain,
                "Pain and or blood during urination": urination_pain,
                "Pelvic pain": pelvic_pain,
                "Pain during ovulation": ovulation_pain,
                "Presence of old or dark blood before period": old_blood,
                "Difficulty getting pregnant": difficulty_pregnant,
                "Bleeding in between periods": between_bleeding,
                "Pain and/or blood during periods": blood_during_period,
                "Presence of blood in stool": blood_in_stool,
                "Calories": calories,
                "Weight": weight,
                "Notes": notes,
                "Treatments Used": ", ".join(treatments_used) if treatments_used else "None",
                "Treatment Comments": treatment_comments
            }
            save_entry(entry)
            st.success("âœ… Entry saved!")

    st.markdown("---")
    st.subheader("ðŸ“Š Symptom Trend Viewer")

    data = load_data()
    if not data.empty:
        data = data.sort_values("Date")
        data["Date"] = pd.to_datetime(data["Date"]).dt.date

        numeric_columns = data.select_dtypes(include='number').columns.tolist()

        selected_metric = st.selectbox("Select one metric to view over time", numeric_columns)

        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(data["Date"], data[selected_metric], marker="o", linestyle="-", linewidth=2, label=selected_metric)
        ax.set_title(f"{selected_metric} Over Time")
        ax.set_xlabel("Date")
        ax.set_ylabel("Level")
        ax.grid(True, alpha=0.3, linestyle="--")
        ax.tick_params(axis="x", rotation=45)
        ax.legend()
        fig.tight_layout()
        st.pyplot(fig)

        st.subheader("ðŸ“„ Latest Entries")
        st.dataframe(data.tail(10), use_container_width=True)
    else:
        st.info("No data available yet. Add your first entry above!")

if __name__ == "__main__":
    main()
